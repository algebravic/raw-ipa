import os

from Compiler.library import print_ln
from Compiler.types import sint, Matrix, Array


numrows_power = int(os.getenv('IPA_NUMROWS_POWER', 10))
numrows = 2 ** numrows_power

verbose = os.getenv('IPA_VERBOSE', None)
if verbose is not None:
    if verbose == 'True':
        verbose = True
    elif verbose == 'False':
        verbose = False
    else:
        raise Exception(f"Unknown verbose value: {verbose}")
else:
    verbose = False

if verbose and numrows_power > 5:
    raise Exception(
        f"You cannot compiling with VERBOSE on for {numrows} rows. "
        f"This will result in quite a bit of output in your terminal."
    )

print_ln('********************  IPA E2E %s **********************', numrows)

reports = Matrix(numrows, 4, sint)

local_params = {
    'reports': reports,
    'sint': sint,
    'print_ln': print_ln,
}

for i in range(numrows):
    for j in range(4):
        cmd = f"reports[{i}][{j}] = sint.get_input_from(0)"
        exec(cmd, {}, local_params)

# Radix sort
reports.sort((0,), n_bits=32)

if verbose:
    for i in range(numrows):
        cmd = (f"print_ln('%s, %s, %s, %s', "
               f"reports[{i}][0].reveal(), reports[{i}][1].reveal(),"
               f"reports[{i}][2].reveal(), reports[{i}][3].reveal(),)")
        exec(cmd, {}, local_params)

helperbit = Array(numrows, sint)
local_params['helperbit'] = helperbit

for i in range(numrows-1):
    cmd = f"helperbit[{i}] = (reports[{i}][0] == reports[{i}+1][0]).if_else(1, 0)"
    exec(cmd, {}, local_params)


helperbit_and_istrigger = Array(numrows, sint)
local_params['helperbit_and_istrigger'] = helperbit_and_istrigger
helperbit_xor_istrigger = Array(numrows, sint)
local_params['helperbit_xor_istrigger'] = helperbit_xor_istrigger

for i in range(numrows-1):
    cmd = f"helperbit_and_istrigger[{i}] = helperbit[{i}] * reports[{i}][1]"
    exec(cmd, {}, local_params)
    cmd = f"helperbit_xor_istrigger[{i}] = (helperbit[{i}] + reports[{i}][1]) % 2"
    exec(cmd, {}, local_params)

if verbose:
    print_ln('%s', helperbit.reveal())
    print_ln('%s', helperbit_and_istrigger.reveal())
    print_ln('%s', helperbit_xor_istrigger.reveal())


stopbits = [Array(numrows, sint) for _ in range(numrows_power)]
local_params['stopbits'] = stopbits

for stopbit in stopbits:
    local_params['stopbit'] = stopbit
    for i in range(numrows):
        cmd = f"stopbit[{i}] = 1"
        exec(cmd, {}, local_params)

credits = [Array(numrows, sint) for _ in range(numrows_power)]
local_params['credits'] = credits

for i, (stopbit, credit) in enumerate(zip(stopbits, credits)):
    stepsize = 2 ** i
    local_params['stopbit'] = stopbit
    local_params['credit'] = credit
    local_params['stepsize'] = stepsize

    for current in range(numrows - stepsize):
        successor = current + stepsize
        # another optimization could be to multiply one time all the
        # helperbit * istrigger bits since these are fixed.
        if i == 0:
            cmd = f"flag = helperbit_and_istrigger[{successor}];"
            # credit is initialized to value, reports[i][2] = value[i]
            cmd += f"credit[{current}] = reports[{current}][2] + flag * reports[{successor}][2];"
            # * stopbit[successor]  stopbit[successor] here would always be 1 so can drop
            cmd += f"stopbit[{current}] = flag"
        else:
            cmd = f"flag = stopbits[{i-1}][{current}] * helperbit_and_istrigger[{successor}];"
            cmd += f"credit[{current}] = "
            cmd += f"credits[{i-1}][{current}] + flag * credits[{i-1}][{successor}];"
            cmd += f"stopbit[{current}] = flag * stopbits[{i-1}][{successor}]"

        exec(cmd, {}, local_params)

    if verbose:
        print_ln('iteration: %s', i)
        print_ln('credit %s', credit.reveal())
        print_ln('stopbit %s', stopbit.reveal())

# I can't sum all of credit, I need to sum only those that correspond to last touches
# helperbit_xor_istrigger * credits[-1] will give this.
creditfinal = Array(numrows, sint)
local_params['creditfinal'] = creditfinal

for i in range(numrows):
    cmd = f"creditfinal[{i}] = helperbit_xor_istrigger[{i}] * credits[-1][{i}]"
    exec(cmd, {}, local_params)

# SUM BREAKDOWNS
# for now we have hard coded 4 breakdown keys
breakdowns = 4

bksums = Array(4, sint)
local_params['bksums'] = bksums

for bk in range(len(bksums)):
    cmd = f"bksums[{bk}] = sint(0)"
    exec(cmd, {}, local_params)
    for i in range(numrows):
        cmd = (
            f"bksums[{bk}] = bksums[{bk}] + "
            f"(reports[{i}][3] == {bk}).if_else(creditfinal[{i}], 0)"
        )
        exec(cmd, {}, local_params)

if verbose:
    for i in range(numrows):
        cmd = (
            f"print_ln('%s, %s, %s, %s, %s', "
            f"reports[{i}][0].reveal(), reports[{i}][1].reveal(),"
            f"reports[{i}][2].reveal(), reports[{i}][3].reveal(), "
            f"creditfinal[{i}].reveal())"
        )
        exec(cmd, {}, local_params)

print_ln("breakdowns: %s", bksums.reveal())
